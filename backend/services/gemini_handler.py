# backend/services/openai_handler.py
import google.generativeai as genai
import asyncio

# ✅ Set your Gemini API Key here directly (or use dotenv if needed)
genai.configure(api_key="API-KEY-IS-HIDDEN-DUE-PRIVACY")

# ✅ Gemini model selection (this must be valid — check via list_models)
model = genai.GenerativeModel("gemini-1.5-flash")
 # or use "gemini-1.5-pro" / "gemini-1.5-flash" if available

def sync_generate_legal_clauses(prompt: str, clause_type: str, context: str = "", n_suggestions: int = 3):
    system_instruction = (
        "You are a helpful legal assistant. "
        "Generate formal, legally sound clauses based on user input. "
        "Use proper legal language and terminology."
    )

    full_prompt = (
        f"{system_instruction}\n"
        f"Clause Type: {clause_type}\n"
        f"Context: {context}\n"
        f"User Prompt: {prompt}\n\n"
        "Generate the clause below:\n"
    )

    try:
        responses = []
        for _ in range(n_suggestions):
            response = model.generate_content(full_prompt)
            if hasattr(response, "text") and response.text:
                responses.append(response.text.strip())
            else:
                responses.append("⚠️ No content generated by Gemini.")
        return responses

    except Exception as e:
        print("[❌ Gemini API Error]:", e)
        return []

async def generate_legal_clauses(prompt: str, clause_type: str, context: str = "", n_suggestions: int = 3):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(
        None,
        lambda: sync_generate_legal_clauses(
            prompt=prompt,
            clause_type=clause_type,
            context=context,
            n_suggestions=n_suggestions
        )
    )
